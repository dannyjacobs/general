from v1.02 of general:
=====================

In geometry.py,

(*) Raising of few exceptions have been fixed.

In my_DSP_modules.py,

(*) In function windowing(), replaced the estimation of area using trapz() with
sum() even if the latter is less accurate in order to be more consistent with FFT
usage downstream.
(*) Added a function PFB_empirical() which empirically generates a polyphase
filter bank. 

In catalog.py, 

(*) Added a new attribute src_shape which is initialized by the newly included 
input parameter in the __init__() member function of class Catalog. The src_shape 
will consist of three elements, namely, major axis FWHM, minor axis FWHM, and 
position angle (degrees), for each source. The docstring has been modified
accordingly. 
(*) Added a new input parameter src_shape_units to member function __init__()
that specifies the units of the major and minor axes, and position angle. The
docstring has been modified accordingly.

---------------------------------------------------------------------------------
from v1.01 of general:
=====================

(*) Added a new module named foregrounds.py.
(*) Added a function power_law_spectral_index() which computes a single power law
spectral index when flux densities and corresponding frequencies are specified.

In my_DSP_modules.py,

(*) function shaping was modified to handle when the window shape is specified in
both lower and upper case letters
(*) Created a window shaping function windowing() which creates a window shape 
with optional padding, and centering capabilities. Differs from shaping() in that 
whole number of samples are specified instead of a fraction for padding.

In my_operations.py,

(*) In function reverse(), replaced the usage of sys.exit() with raise of
exceptions.

In catalog.py,

(*) In __init__() of class Catalog, force attributes flux_density and
spectral_index to a numpy vector of non-zero dimensions even if the input 
provides only a single object to be cataloged.

In geometry.py, 

(*) Modified altaz2dircos() so that it handles input altitudes which are negative
(*) Modified altaz2dircos() to check that altitudes lie in the range -90 to +90
degrees, earlier it was checking only the range 0 to 90 degrees.
(*) Rectified the return value in dircos2altaz() from being a 3-column array to a
2-column array. Changed documentation accordingly
(*) In dircos2altaz(), changed usage of numpy absolute() to numpy abs()

---------------------------------------------------------------------------------
from v1.0 of general:
====================

In my_DSP_modules.py,

(*) Moved functions XC() and spectax() from MOFF module to the DSP module.
Changed the module prefix in the concerned calling sequences accordingly.
(*) Added keyword boolean input 'shift' to perform a shift to the correlated
sequence to be compatible for equivalence with FFT based methods. Without shift,
the usual correlated sequence is returned.
(*) Added a function smooth() to smooth a sequence using a moving mean or median 
window
(*) Added a function filter() to create a low/high pass filtered data from the 
input using user supplied filter window specifications

In catalog.py,

(*) Added docstring to all classes and associated member functions
(*) Now input named catalog to the __init__() member function of class SkyModel
is verified to be an instance of class Catalog

In geometry.py,

(*) function altaz2dircos() was found to fail when a 2-element list was supplied
after converting from list to numpy array. Now it is forced to convert to a 
two-dimensional array even if only one list is provided.
(*) Moved the routine baseline_generator from geometry.py to interferometry.py

---------------------------------------------------------------------------------

from v1.2 of python-trials:
==========================

In geometry.py,

(*) Added docstring to class Point and its member functions
(*) Instance of Point class can now be initiated with a numpy array of
coordinates
(*) An instance can now be initialized using another instance of Point class
(*) Added operator overloading __abs__() to compute the magnitude of the vector
(*) Added overloaded comparison operators for <, <=, >, >=, and == to compare
the magnitudes of two vectors

In my_DSP_modules.py,

(*) Added a new function shaping() to return rectangular or Blackman-Nuttall 
windows. Read docstring for more details.
(*) Added new function downsampler() to downsample a given data set either
in intervals of integral multiples or non-integral intervals through 
interpolation.
(*) Added new function upsampler() to upsample a given data set through 
interpolation.

In my_gridding_modules.py,

(*) interpolate module in scipy is separately imported instead of a 
direct call using scipy.interpolate
(*) Modified conv_grid2d() to handle xc, yc, xkern, ykern, xgrid, ygrid,
and kernel not only as list inputs but also as numpy arrays
(*) Modified conv_grid1d() to handle xc, xkern, xgrid, ygrid, and kernel
not only as list inputs but also as numpy arrays
(*) Modified conv_grid1d() to perform complex interpolation depending on
input data type
(*) Modified conv_grid2d() to perform complex interpolation depending on
input data type
